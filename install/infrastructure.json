{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Sensei apply cloud formation.",
    "Parameters": {
        "GitRemote": {
            "Type": "String",
            "Description": "HTTPS or SSH remote to pull code from",
            "Default": "https://github.com/CascadeEnergy/sensei-apply.git"
        },
        "GitBranch": {
            "Type": "String",
            "Description": "The branch in the repo to install",
            "Default": "master"
        },
        "EmailRecipients": {
            "Type": "CommaDelimitedList",
            "Description": "Comma-delimited list of email addresses to notify."
        },
        "GitterApiToken": {
            "Type": "String",
            "Description": "Gitter api token."
        },
        "GitterRoomId": {
            "Type": "String",
            "Description": "Id of the Gitter chat room to notify."
        },
        "Route53RecordName": {
            "Type": "String",
            "Description": "Route 53 record name to use as DNS target. Cannot end with a period. (will be appended with .energysensei.info.)",
            "AllowedPattern": "([a-z.])+(?<!\\\\.)$"
        },
        "Channel": {
            "Type": "String",
            "Description": "The channel partner name.",
            "AllowedPattern": "[a-z.]+"
        },
        "Environment": {
            "Type": "String",
            "Description": "The environment.",
            "Default": "development",
            "AllowedValues": ["development", "staging", "production"]
        },
        "KeyName": {
            "Description": "The EC2 Key Pair to allow SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        }
    },
    "Conditions": {
        "IsDevelopmentEnvironment": {"Fn::Equals": [{"Ref": "Environment"}, "development"]},
        "NotDevelopmentEnvironment": {"Fn::Not": [{"Condition": "IsDevelopmentEnvironment"}]}
    },
    "Resources": {
        "s3Resumes": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private"
            }
        },
        "ddbResumesMeta": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {"AttributeName": "key", "AttributeType": "S"}
                ],
                "KeySchema": [
                    {"AttributeName": "key", "KeyType": "HASH"}
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 1,
                    "WriteCapacityUnits": 1
                }
            }
        },
        "SenseiApplyRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": ["ec2.amazonaws.com"]
                            },
                            "Action": ["sts:AssumeRole"]
                        }
                    ]
                },
                "Path": "/cascade/senseiApplyRole/",
                "Policies": [
                    {
                        "PolicyName": "sensei-apply-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*"
                                    ],
                                    "Resource": [
                                        {"Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", "table/", {"Ref": "ddbResumesMeta"}]]}
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Resource": [
                                        {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "s3Resumes"}]]},
                                        {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "s3Resumes"}, "/*"]]}
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "SenseiApplyProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/cascade/senseiApplyProfile/",
                "Roles": [ { "Ref": "SenseiApplyRole" } ]
            }
        },
        "DevelopmentWebServer": {
            "Type": "AWS::EC2::Instance",
            "Condition": "IsDevelopmentEnvironment",
            "DependsOn": "LaunchConfig",
            "Properties": {
                "InstanceType": "t2.micro",
                "IamInstanceProfile": {
                    "Ref": "SenseiApplyProfile"
                },
                "KeyName": {"Ref": "KeyName"},
                "ImageId": "ami-b5a7ea85",
                "SecurityGroups": [{"Ref": "InstanceSecurityGroup"}],
                "UserData": {"Fn::Base64": {"Fn::Join": ["",
                    [
                        "#!/bin/bash -xe\n",
                        "yum update -y aws-cfn-bootstrap\n",
                        "/opt/aws/bin/cfn-init -v ",
                        " --region ", {"Ref": "AWS::Region"},
                        " --stack ", {"Ref": "AWS::StackName"},
                        " --resource LaunchConfig\n"
                    ]]}
                },
                "Tags": [
                    {"Key": "Name", "Value": "apply"},
                    {"Key": "Channel", "Value": {"Ref": "Channel"}},
                    {"Key": "Environment", "Value": {"Ref": "Environment"}},
                    {"Key": "System", "Value": "apply"}
                ]
            }
        },
        "WebServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Condition": "NotDevelopmentEnvironment",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": {"Ref": "AWS::Region"}},
                "DesiredCapacity": "2",
                "LaunchConfigurationName": {"Ref": "LaunchConfig"},
                "MinSize": "1",
                "MaxSize": "3",
                "LoadBalancerNames": [{"Ref": "ElasticLoadBalancer"}],
                "Tags": [
                    {"Key": "Name", "Value": "apply", "PropagateAtLaunch": "true"},
                    {"Key": "Channel", "Value": {"Ref": "Channel"}, "PropagateAtLaunch": "true"},
                    {"Key": "Environment", "Value": {"Ref": "Environment"}, "PropagateAtLaunch": "true"},
                    {"Key": "System", "Value": "apply", "PropagateAtLaunch": "true"}
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M",
                    "Count": "1"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": "1",
                    "MaxBatchSize": "1",
                    "PauseTime": "PT15M",
                    "WaitOnResourceSignals": "true"
                }
            }
        },
        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "Comment": "Ensure application is ready.",
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "default": ["deployCode", "composeYaml"]
                    },
                    "deployCode": {
                        "packages": {
                            "yum": {
                                "httpd24": [],
                                "php55": [],
                                "php55-pecl-memcached": [],
                                "git": []
                            }
                        },
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {"Fn::Join": ["", [
                                    "[main]\n",
                                    "stack=", {"Ref": "AWS::StackId"}, "\n",
                                    "region=", {"Ref": "AWS::Region"}, "\n"
                                ]]},
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },

                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {"Fn::Join": ["", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                    "action=/opt/aws/bin/cfn-init -v ",
                                    "         --stack ", {"Ref": "AWS::StackName"},
                                    "         --resource LaunchConfig ",
                                    "         --region ", {"Ref": "AWS::Region"}, "\n",
                                    "runas=root\n"
                                ]]}
                            }
                        },
                        "commands": {
                            "000_make_working_dir": {
                                "command": "mkdir /var/cascade"
                            },
                            "100_clone_repo": {
                                "command": {"Fn::Join": ["", ["git clone -b ", {"Ref": "GitBranch"}, " ", {"Ref": "GitRemote"}]]},
                                "cwd": "/var/cascade"
                            },
                            "200_copy_httpd_conf": {
                                "command": "cp sensei-apply.conf /etc/httpd/conf.d/sensei-apply.conf",
                                "cwd": "/var/cascade/sensei-apply/install"
                            },
                            "300_get_composer": {
                                "command": "curl -sS https://getcomposer.org/installer | php",
                                "cwd": "/var/cascade/sensei-apply"
                            },
                            "400_run_composer": {
                                "command": "php composer.phar install --no-dev --optimize-autoloader --prefer-dist --no-interaction",
                                "cwd": "/var/cascade/sensei-apply",
                                "env": {"COMPOSER_HOME": "/home/ec2-user"}
                            },
                            "500_change_ownership": {
                                "command": "chown -R ec2-user:ec2-user /var/cascade"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "httpd": {"enabled": "true", "ensureRunning": "true"},
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                                }
                            }
                        }
                    },
                    "composeYaml": {
                        "files": {
                            "/var/cascade/sensei-apply/config/local.yml": {
                                "content": {"Fn::Join": ["", [
                                    "gitterToken: {{gitterToken}}\n",
                                    "gitterRoomId: {{gitterRoomId}}\n",
                                    "fromAddress: resumes@{{route53Record}}\n",
                                    "recipients:\n",
                                    "{{#recipients}}  - {{.}}\n{{/recipients}}",
                                    "resumesBucket: {{resumesBucket}}\n",
                                    "resumesMetaTable: {{resumesMetaTable}}\n",
                                    "elastiCacheHost: {{elastiCacheHost}}\n",
                                    "elastiCachePort: {{elastiCachePort}}\n",
                                    "region: {{region}}\n"
                                ]]},
                                "context": {
                                    "gitterToken": {"Ref": "GitterApiToken"},
                                    "gitterRoomId": {"Ref": "GitterRoomId"},
                                    "route53Record": {"Fn::Join": ["", [{"Ref": "Route53RecordName"}, ".energysensei.info"]]},
                                    "recipients": {"Ref": "EmailRecipients"},
                                    "resumesBucket": {"Ref": "s3Resumes"},
                                    "resumesMetaTable": {"Ref": "ddbResumesMeta"},
                                    "region": {"Ref": "AWS::Region"},
                                    "elastiCacheHost": {"Fn::GetAtt": ["ElastiCacheCluster", "ConfigurationEndpoint.Address"]},
                                    "elastiCachePort": {"Fn::GetAtt": ["ElastiCacheCluster", "ConfigurationEndpoint.Port"]}
                                },
                                "mode": "000644",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            }
                        },
                        "commands": {
                            "httpd_reload": {
                                "command": "service httpd reload"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "InstanceType": "t2.micro",
                "IamInstanceProfile": {
                    "Ref": "SenseiApplyProfile"
                },
                "KeyName": {"Ref": "KeyName"},
                "ImageId": "ami-b5a7ea85",
                "SecurityGroups": [{"Ref": "InstanceSecurityGroup"}],
                "UserData": {"Fn::Base64": {"Fn::Join": ["",
                    [
                        "#!/bin/bash -xe\n",
                        "yum update -y aws-cfn-bootstrap\n",

                        "/opt/aws/bin/cfn-init -v ",
                        " --region ", {"Ref": "AWS::Region"},
                        " --stack ", {"Ref": "AWS::StackName"},
                        " --resource LaunchConfig\n",

                        "/opt/aws/bin/cfn-signal -e $? ",
                        " --region ", { "Ref" : "AWS::Region" },
                        " --stack ", { "Ref" : "AWS::StackName" },
                        " --resource WebServerGroup\n"
                    ]]}
                }
            }
        },
        "WebServerScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Condition": "NotDevelopmentEnvironment",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {"Ref": "WebServerGroup"},
                "Cooldown": "60",
                "ScalingAdjustment": "1"
            }
        },
        "WebServerScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Condition": "NotDevelopmentEnvironment",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {"Ref": "WebServerGroup"},
                "Cooldown": "60",
                "ScalingAdjustment": "-1"
            }
        },
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Condition": "NotDevelopmentEnvironment",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": {"Ref": "AWS::Region"}},
                "CrossZone": "true",
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP"
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:80/login",
                    "Interval": "30",
                    "Timeout": "5",
                    "HealthyThreshold": "3",
                    "UnhealthyThreshold": "5"
                }
            }
        },
        "Route53Record": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneId": "/hostedzone/Z1DQ4UYB8BEAYN",
                "Name": {"Fn::Join": ["", [{"Ref": "Route53RecordName"}, ".energysensei.info."]]},
                "Type": "CNAME",
                "TTL": "900",
                "ResourceRecords": [{"Fn::If": [
                    "NotDevelopmentEnvironment",
                    {"Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]},
                    {"Fn::GetAtt": ["DevelopmentWebServer", "PublicDnsName"]}
                ]}]
            }
        },
        "ElastiCacheCluster": {
            "Type": "AWS::ElastiCache::CacheCluster",
            "Properties": {
                "Engine": "memcached",
                "CacheNodeType": "cache.t2.micro",
                "NumCacheNodes": "1",
                "VpcSecurityGroupIds": [{"Fn::GetAtt": [ "ElastiCacheSecurityGroup", "GroupId"]}]
            }
        },
        "ElastiCacheSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "ElastiCache Security Group",
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": "11211",
                    "ToPort": "11211",
                    "SourceSecurityGroupName": {"Ref": "InstanceSecurityGroup"}
                }]
            }
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access via port 80",
                "SecurityGroupIngress": [
                    {"IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0"},
                    {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "50.204.9.158/24"},
                    {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "98.246.154.178/24"}
                ]
            }
        }
    }
}
