{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Sensei apply cloud formation.",
    "Parameters": {
        "EmailRecipients": {
            "Type": "CommaDelimitedList",
            "Description": "Comma-delimited list of email addresses to notify."
        },
        "GitterApiToken": {
            "Type": "String",
            "Description": "Gitter api token."
        },
        "GitterRoomId": {
            "Type": "String",
            "Description": "Id of the Gitter chat room to notify."
        },
        "Route53HostedZoneId": {
          "Type": "String",
          "Description": "The Hosted Zone Id of the route 53 domain to make a record in"
        },
        "Route53RecordName": {
            "Type": "String",
            "Description": "Route 53 record name to use as DNS target. Cannot end with a period. (will be appended with .)",
            "AllowedPattern": "([a-z.])+(?<!\\\\.)$"
        },
        "Environment": {
            "Type": "String",
            "Description": "Is this development or production? Development mode: no elb, autoscaling, or elasticache",
            "Default": "production",
            "AllowedValues": ["production", "development"]
        },
        "KeyName": {
            "Description": "The EC2 Key Pair to allow SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "DockerImage": {
            "Type": "String",
            "Description": "Docker image location i.e. <username>/<repo> on dockerhub.",
            "Default": "nackjicholson/sensei-apply"
        }
    },
    "Conditions": {
        "IsDevelopmentEnvironment": {"Fn::Equals": [{"Ref": "Environment"}, "development"]},
        "NotDevelopmentEnvironment": {"Fn::Not": [{"Condition": "IsDevelopmentEnvironment"}]}
    },
    "Resources": {
        "s3Resumes": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private"
            }
        },
        "ddbResumesMeta": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {"AttributeName": "key", "AttributeType": "S"}
                ],
                "KeySchema": [
                    {"AttributeName": "key", "KeyType": "HASH"}
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 1,
                    "WriteCapacityUnits": 1
                }
            }
        },
        "iamSenseiApplyRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": ["ec2.amazonaws.com"]
                            },
                            "Action": ["sts:AssumeRole"]
                        }
                    ]
                },
                "Path": "/cascade/senseiApplyRole/",
                "Policies": [
                    {
                        "PolicyName": "sensei-apply-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": ["dynamodb:*"],
                                    "Resource": [
                                        {"Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", "table/", {"Ref": "ddbResumesMeta"}]]}
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": ["s3:*"],
                                    "Resource": [
                                        {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "s3Resumes"}]]},
                                        {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "s3Resumes"}, "/*"]]}
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "iamSenseiApplyProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/cascade/senseiApplyProfile/",
                "Roles": [{"Ref": "iamSenseiApplyRole"}]
            }
        },
        "ec2DevelopmentWebServer": {
            "Type": "AWS::EC2::Instance",
            "Condition": "IsDevelopmentEnvironment",
            "DependsOn": "asWebServerLaunchConfig",
            "Properties": {
                "InstanceType": "t2.micro",
                "IamInstanceProfile": {"Ref": "iamSenseiApplyProfile"},
                "KeyName": {"Ref": "KeyName"},
                "ImageId": "ami-b5a7ea85",
                "SecurityGroups": [{"Ref": "ec2InstanceSecurityGroup"}],
                "UserData": {"Fn::Base64": {"Fn::Join": ["",
                    [
                        "#!/bin/bash -xe\n",
                        "yum update -y aws-cfn-bootstrap\n",
                        "/opt/aws/bin/cfn-init -v ",
                        " --region ", {"Ref": "AWS::Region"},
                        " --stack ", {"Ref": "AWS::StackName"},
                        " --resource asWebServerLaunchConfig",
                        " --configsets default,development\n"
                    ]]}
                },
                "Tags": [{"Key": "Name", "Value": "apply"}]
            }
        },
        "asWebServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Condition": "NotDevelopmentEnvironment",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": {"Ref": "AWS::Region"}},
                "DesiredCapacity": "2",
                "LaunchConfigurationName": {"Ref": "asWebServerLaunchConfig"},
                "MinSize": "1",
                "MaxSize": "3",
                "LoadBalancerNames": [{"Ref": "elbLoadBalancer"}],
                "Tags": [{"Key": "Name", "Value": "apply", "PropagateAtLaunch": "true"}]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M",
                    "Count": "1"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": "1",
                    "MaxBatchSize": "1",
                    "PauseTime": "PT15M",
                    "WaitOnResourceSignals": "true"
                }
            }
        },
        "asWebServerLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "Comment": "Configures and starts the application.",
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "default": ["hostSetup", "dockerSetup", "dockerRun", "cfnHup"],
                        "development": ["devSetup"]
                    },
                    "hostSetup": {
                        "files": {
                            "/var/cascade/sensei-apply/config/local.yml": {
                                "content": {"Fn::Join": ["", [
                                    "gitterToken: {{gitterToken}}\n",
                                    "gitterRoomId: {{gitterRoomId}}\n",
                                    "fromAddress: resumes@{{route53Record}}\n",
                                    "recipients:\n",
                                    "{{#recipients}}  - {{.}}\n{{/recipients}}",
                                    "resumesBucket: {{resumesBucket}}\n",
                                    "resumesMetaTable: {{resumesMetaTable}}\n",
                                    "elastiCacheHost: {{elastiCacheHost}}\n",
                                    "elastiCachePort: {{elastiCachePort}}\n",
                                    "region: {{region}}\n"
                                ]]},
                                "context": {
                                    "gitterToken": {"Ref": "GitterApiToken"},
                                    "gitterRoomId": {"Ref": "GitterRoomId"},
                                    "route53Record": {"Fn::Join": ["", [{"Ref": "Route53RecordName"}, ".energysensei.info"]]},
                                    "recipients": {"Ref": "EmailRecipients"},
                                    "resumesBucket": {"Ref": "s3Resumes"},
                                    "resumesMetaTable": {"Ref": "ddbResumesMeta"},
                                    "region": {"Ref": "AWS::Region"},
                                    "elastiCacheHost": {"Fn::GetAtt": ["elcCluster", "ConfigurationEndpoint.Address"]},
                                    "elastiCachePort": {"Fn::GetAtt": ["elcCluster", "ConfigurationEndpoint.Port"]}
                                },
                                "mode": "000644"
                            },
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {"Fn::Join": ["", [
                                    "[main]\n",
                                    "stack=", {"Ref": "AWS::StackId"}, "\n",
                                    "region=", {"Ref": "AWS::Region"}, "\n"
                                ]]},
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {"Fn::Join": ["", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.asWebServerLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                    "action=/opt/aws/bin/cfn-init -v ",
                                    "         --stack ", {"Ref": "AWS::StackName"},
                                    "         --resource asWebServerLaunchConfig ",
                                    "         --region ", {"Ref": "AWS::Region"}, "\n",
                                    "runas=root\n"
                                ]]}
                            }
                        }
                    },
                    "dockerSetup": {
                        "packages": {
                            "yum": {"docker": []}
                        },
                        "services": {
                            "sysvinit": {
                                "docker": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    },
                    "dockerRun": {
                        "commands": {
                            "00-pull": {
                                "command": {"Fn::Join": [" ", ["docker pull", {"Ref": "DockerImage"}]]}
                            },
                            "01-run": {
                                "command": {"Fn::Join": [
                                    " ",
                                    [
                                        "docker run -d -p 80:80",
                                        {"Fn::If": [
                                            "NotDevelopmentEnvironment",
                                            "-v /var/cascade/sensei-apply/config/local.yml:/var/www/sensei-apply/config/local.yml",
                                            "-v /var/cascade/sensei-apply/:/var/www/sensei-apply/"
                                        ]},
                                        {"Ref": "DockerImage"}
                                    ]
                                ]}
                            }
                        }
                    },
                    "cfnHup": {
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                                }
                            }
                        }
                    },
                    "devSetup": {
                        "packages": {
                            "yum": {
                                "php55": []
                            }
                        },
                        "commands": {
                            "change_ownership": {
                                "command": "chown -R ec2-user:ec2-user /var/cascade"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "InstanceType": "t2.micro",
                "IamInstanceProfile": {"Ref": "iamSenseiApplyProfile"},
                "KeyName": {"Ref": "KeyName"},
                "ImageId": "ami-b5a7ea85",
                "SecurityGroups": [{"Ref": "ec2InstanceSecurityGroup"}],
                "UserData": {"Fn::Base64": {"Fn::Join": ["",
                    [
                        "#!/bin/bash -xe\n",
                        "yum update -y aws-cfn-bootstrap\n",

                        "/opt/aws/bin/cfn-init -v ",
                        " --region ", {"Ref": "AWS::Region"},
                        " --stack ", {"Ref": "AWS::StackName"},
                        " --resource asWebServerLaunchConfig\n",

                        "/opt/aws/bin/cfn-signal -e $? ",
                        " --region ", {"Ref": "AWS::Region"},
                        " --stack ", {"Ref": "AWS::StackName"},
                        " --resource asWebServerGroup\n"
                    ]]}
                }
            }
        },
        "asWebServerScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Condition": "NotDevelopmentEnvironment",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {"Ref": "asWebServerGroup"},
                "Cooldown": "60",
                "ScalingAdjustment": "1"
            }
        },
        "asWebServerScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Condition": "NotDevelopmentEnvironment",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {"Ref": "asWebServerGroup"},
                "Cooldown": "60",
                "ScalingAdjustment": "-1"
            }
        },
        "elbLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Condition": "NotDevelopmentEnvironment",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": {"Ref": "AWS::Region"}},
                "CrossZone": "true",
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP"
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:80/healthcheck",
                    "Interval": "30",
                    "Timeout": "5",
                    "HealthyThreshold": "3",
                    "UnhealthyThreshold": "5"
                }
            }
        },
        "r53Record": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneId": {"Fn::Join": ["", ["/hostedzone/", {"Ref": "Route53HostedZoneId"}]]},
                "Name": {"Fn::Join": ["", [{"Ref": "Route53RecordName"}, "."]]},
                "Type": "CNAME",
                "TTL": "900",
                "ResourceRecords": [{"Fn::If": [
                    "NotDevelopmentEnvironment",
                    {"Fn::GetAtt": ["elbLoadBalancer", "DNSName"]},
                    {"Fn::GetAtt": ["ec2DevelopmentWebServer", "PublicDnsName"]}
                ]}]
            }
        },
        "elcCluster": {
            "Type": "AWS::ElastiCache::CacheCluster",
            "Properties": {
                "Engine": "memcached",
                "CacheNodeType": "cache.t2.micro",
                "NumCacheNodes": "1",
                "VpcSecurityGroupIds": [{"Fn::GetAtt": [ "ec2ElasticacheSecurityGroup", "GroupId"]}]
            }
        },
        "ec2ElasticacheSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "ElastiCache Security Group",
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": "11211",
                    "ToPort": "11211",
                    "SourceSecurityGroupName": {"Ref": "ec2InstanceSecurityGroup"}
                }]
            }
        },
        "ec2InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access via port 80",
                "SecurityGroupIngress": [
                    {"IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0"},
                    {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "50.204.9.158/24"},
                    {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "98.246.154.178/24"}
                ]
            }
        }
    }
}
